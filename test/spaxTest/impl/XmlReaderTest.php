<?php

namespace spaxTest\impl;

use PHPUnit_Framework_TestCase;
use Spax\Helper\DefaultHandler;
use Spax\Impl\XmlReader;
use spaxTest\mock\TestHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-21 at 10:04:33.
 */
class XmlReaderTest extends PHPUnit_Framework_TestCase {

    /**
     * @var XmlReader
     */
    protected $xmlReader;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->xmlReader = new XmlReader();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Test that the correct attributes are being passed
     * to ContentHandler::startElement()
     * 
     * @covers spax\impl\XmlReader::parse()
     * @skip
     */
    public function testSimpleAttributes() {
        $this->markTestSkipped();
        $handler = new TestHandler();
        $this->xmlReader->setContentHandler($handler);

        $xml = SPAX_Test_DIR . "/data/simpleXml.xml";

        $this->xmlReader->parse($xml);
    }

    /**
     * Test with a simple xml structure.  MockObjects provide a way
     * to test the order methods are called in.
     * 
     * @covers spax\impl\XmlReader::parse
     * @todo   Implement testParse().
     * 
     */
    public function testParseSimple() {
        $handler = $this->getMock('Spax\\Helper\\DefaultHandler', array('startDocument', 'endDocument', 'startElement', 'endElement'));

        $handler->expects($this->at(0))->method('startDocument');

        // <element1>
        $handler->expects($this->at(1))->method('startElement')
                ->with($this->equalTo(''), $this->equalTo('element1'), $this->equalTo('element1'), $this->anything());
        // <element2>
        $handler->expects($this->at(2))->method('startElement')
                ->with($this->equalTo(''), $this->equalTo('element2'), $this->equalTo('element2'), $this->anything());
        // </element2>
        $handler->expects($this->at(3))->method('endElement')
                ->with($this->equalTo(''), $this->equalTo('element2'), $this->equalTo('element2'));
        // <element3>
        $handler->expects($this->at(4))->method('startElement')
                ->with($this->equalTo(''), $this->equalTo('element3'), $this->equalTo('element3'), $this->anything());
        // </element3>
        $handler->expects($this->at(5))->method('endElement')
                ->with($this->equalTo(''), $this->equalTo('element3'), $this->equalTo('element3'));
        // <element4>
        $handler->expects($this->at(6))->method('startElement')
                ->with($this->equalTo(''), $this->equalTo('element4'), $this->equalTo('element4'), $this->anything());
        // </element4>
        $handler->expects($this->at(7))->method('endElement')
                ->with($this->equalTo(''), $this->equalTo('element4'), $this->equalTo('element4'));
        // </element1>
        $handler->expects($this->at(8))->method('endElement')
                ->with($this->equalTo(''), $this->equalTo('element1'), $this->equalTo('element1'));

        $handler->expects($this->at(9))->method('endDocument');

        $this->xmlReader->setContentHandler($handler);

        $xml = SPAX_Test_DIR . "/data/simpleXml.xml";

        $this->xmlReader->parse($xml);
    }

    /**
     * 
     * @test
     */
    public function testParseSimpleNamespaced() {

        $handler = $this->getMock('Spax\\Helper\\DefaultHandler', array('startDocument', 'startPrefixMapping', 'endPrefixMapping', 'endDocument', 'startElement', 'endElement'));

        $handler->expects($this->at(0))->method('startDocument');

        // <ns1:element1 xmlns:ns1="http://namespace1.net/namespace1" xmlns:ns2="http://namespace2.net/namespace2">
        $handler->expects($this->at(1))->method('startPrefixMapping')
                ->with($this->equalTo('ns1'), $this->equalTo('http://namespace1.net/namespace1'));
        $handler->expects($this->at(2))->method('startPrefixMapping')
                ->with($this->equalTo('ns2'), $this->equalTo('http://namespace2.net/namespace2'));
        $handler->expects($this->at(3))->method('startElement')
                ->with($this->equalTo('http://namespace1.net/namespace1'), $this->equalTo('element1'), $this->equalTo('ns1:element1'), $this->anything());

        // <ns2:element2>
        $handler->expects($this->at(4))->method('startElement')
                ->with($this->equalTo('http://namespace1.net/namespace1'), $this->equalTo('element2'), $this->equalTo('ns1:element2'), $this->anything());

        // </ns2:element2>
        $handler->expects($this->at(5))->method('endElement')
                ->with($this->equalTo('http://namespace1.net/namespace1'), $this->equalTo('element2'), $this->equalTo('ns1:element2'));

        // <ns2:element3>
        $handler->expects($this->at(6))->method('startElement')
                ->with($this->equalTo('http://namespace2.net/namespace2'), $this->equalTo('element3'), $this->equalTo('ns2:element3'), $this->anything());

        // </ns2:element3>
        $handler->expects($this->at(7))->method('endElement')
                ->with($this->equalTo('http://namespace2.net/namespace2'), $this->equalTo('element3'), $this->equalTo('ns2:element3'));

        // </ns1:element1>
        $handler->expects($this->at(8))->method('endElement')
                ->with($this->equalTo('http://namespace1.net/namespace1'), $this->equalTo('element1'), $this->equalTo('ns1:element1'));
        $handler->expects($this->at(9))->method('endPrefixMapping')->with($this->equalTo('ns1'));
        $handler->expects($this->at(10))->method('endPrefixMapping')->with($this->equalTo('ns2'));

        $handler->expects($this->at(11))->method('endDocument');

        $this->xmlReader->setContentHandler($handler);

        $xml = SPAX_Test_DIR . "/data/simpleNamespacedXml.xml";

        $this->xmlReader->parse($xml);
    }

    public function next(&$index) {
        $index++;
        return $this->at($index);
    }

    public function testNs2() {
        $this->markTestSkipped();
        $handler = new TestHandler();

        $this->xmlReader->setContentHandler($handler);
        $xml = SPAX_Test_DIR . "/data/simpleNamespacedXml2.xml";

        $this->xmlReader->parse($xml);
        echo $handler->toString();
    }

    public function testSimpleNamespaced2() {
        $handler = $this->getMock('Spax\\Helper\\DefaultHandler', array('startDocument', 'startPrefixMapping', 'endPrefixMapping', 'endDocument', 'startElement', 'endElement'));

        $this->xmlReader->setContentHandler($handler);

        $index = -1;

        $handler->expects($this->next($index))->method('startDocument');

        // <root xmlns="http.....
        $handler->expects($this->next($index))->method('startPrefixMapping')
                ->with($this->equalTo(''), $this->equalTo('http://defaultnamespace.com/xml'));
        $handler->expects($this->next($index))->method('startPrefixMapping')
                ->with($this->equalTo('ns1'), $this->equalTo('http://www.namespace1.net/namespace1'));
        $handler->expects($this->next($index))->method('startPrefixMapping')
                ->with($this->equalTo('ns2'), $this->equalTo('http://www.namespace2.net/namespace2'));
        $handler->expects($this->next($index))->method('startElement')
                ->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('root'), $this->equalTo('root'), $this->anything());

        // <ns1:elemet1 xmlns:ns4="http://www.namespac.... 
        $handler->expects($this->next($index))->method('startPrefixMapping')
                ->with($this->equalTo('ns4'), $this->equalTo('http://www.namespace4.net/namespace4'));
        $handler->expects($this->next($index))->method('startElement')
                ->with($this->equalTo('http://www.namespace1.net/namespace1'), $this->equalTo('element1'), $this->equalTo('ns1:element1'), $this->anything());

        // <ns1:element1 /> 
        $handler->expects($this->next($index))->method('startElement')
                ->with($this->equalTo('http://www.namespace1.net/namespace1'), $this->equalTo('element1'), $this->equalTo('ns1:element1'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')
                ->with($this->equalTo('http://www.namespace1.net/namespace1'), $this->equalTo('element1'), $this->equalTo('ns1:element1'));

        // </ns1:element1>
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://www.namespace1.net/namespace1'), $this->equalTo('element1'), $this->equalTo('ns1:element1'));
        $handler->expects($this->next($index))->method('endPrefixMapping')->with($this->equalTo('ns4'));

        // <element2 />
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('element2'), $this->equalTo('element2'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('element2'), $this->equalTo('element2'));

        // <ns2:element3 />
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://www.namespace2.net/namespace2'), $this->equalTo('element3'), $this->equalTo('ns2:element3'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://www.namespace2.net/namespace2'), $this->equalTo('element3'), $this->equalTo('ns2:element3'));

        // <element4 xmlns="http:
        $handler->expects($this->next($index))->method('startPrefixMapping')
                ->with($this->equalTo(''), $this->equalTo('http://www.namespace3.net/namespace3'));
        $handler->expects($this->next($index))->method('startElement')
                ->with($this->equalTo('http://www.namespace3.net/namespace3'), $this->equalTo('element4'), $this->equalTo('element4'), $this->anything());

        // <element5> ... </element5>
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://www.namespace3.net/namespace3'), $this->equalTo('element5'), $this->equalTo('element5'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://www.namespace3.net/namespace3'), $this->equalTo('element5'), $this->equalTo('element5'));

        // <ns2:element6 />
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://www.namespace2.net/namespace2'), $this->equalTo('element6'), $this->equalTo('ns2:element6'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://www.namespace2.net/namespace2'), $this->equalTo('element6'), $this->equalTo('ns2:element6'));

        // </element4>
        $handler->expects($this->next($index))->method('endElement')
                ->with($this->equalTo('http://www.namespace3.net/namespace3'), $this->equalTo('element4'), $this->equalTo('element4'));
        $handler->expects($this->next($index))->method('endPrefixMapping')->with($this->equalTo(''));

        // <element2 />
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('element2'), $this->equalTo('element2'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('element2'), $this->equalTo('element2'));

        // <element7 xmlns="http:/
        $handler->expects($this->next($index))->method('startPrefixMapping')
                ->with($this->equalTo(''), $this->equalTo('http://defaultnamespace.com/2'));
        $handler->expects($this->next($index))->method('startElement')
                ->with($this->equalTo('http://defaultnamespace.com/2'), $this->equalTo('element7'), $this->equalTo('element7'), $this->anything());

        // <element8 />
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://defaultnamespace.com/2'), $this->equalTo('element8'), $this->equalTo('element8'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://defaultnamespace.com/2'), $this->equalTo('element8'), $this->equalTo('element8'));

        // </element7>
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://defaultnamespace.com/2'), $this->equalTo('element7'), $this->equalTo('element7'));
        $handler->expects($this->next($index))->method('endPrefixMapping')->with($this->equalTo(''));
        
        // <element2 />
        $handler->expects($this->next($index))->method('startElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('element2'), $this->equalTo('element2'), $this->anything());
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('element2'), $this->equalTo('element2'));

        // </root>
        $handler->expects($this->next($index))->method('endElement')->with($this->equalTo('http://defaultnamespace.com/xml'), $this->equalTo('root'), $this->equalTo('root'));
        $handler->expects($this->next($index))->method('endPrefixMapping')->with($this->equalTo('ns1'));
        $handler->expects($this->next($index))->method('endPrefixMapping')->with($this->equalTo('ns2'));
        $handler->expects($this->next($index))->method('endPrefixMapping')->with($this->equalTo(''));
        
        $handler->expects($this->next($index))->method('endDocument');
        
        $xml = SPAX_Test_DIR . "/data/simpleNamespacedXml2.xml";

        $this->xmlReader->parse($xml);
    }

}
